name: Advanced OpenWrt WR3000 Custom Build

on:
  workflow_dispatch:
    inputs:
      fast:
        description: 'Enable fast build mode (lighter config, tmpfs use if available)'
        required: false
        default: 'false'
  push:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * *" # Daily 03:00 UTC build

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git
  OPENWRT_BRANCH: openwrt-24.10
  GL_MT6000_REPO: https://github.com/Christian720420/GL-MT6000.git
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  DL_DIR: ${{ github.workspace }}/dl

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 720

    concurrency:
      group: build-${{ github.workflow }}-${{ matrix.device }}-${{ github.ref }}
      cancel-in-progress: true

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        device: [cudy_wr3000-v1]

    env:
      DEVICE: ${{ matrix.device }}
      CONFIG_FILE: "wr3000.config"
      TARGET: mediatek
      SUBTARGET: filogic

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------------------- dl & ccache caching -----------------------
      - name: Cache DL (OpenWrt sources) and feeds conf
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.DL_DIR }}
            openwrt/dl
          key: dl-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            dl-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}-
            dl-${{ runner.os }}-${{ matrix.device }}-
            dl-${{ runner.os }}-

      - name: Cache CCACHE (persistent)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            .ccache
          key: ccache-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}-${{ hashFiles('feeds.conf.default') }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}-${{ hashFiles('feeds.conf.default') }}-
            ccache-${{ runner.os }}-${{ matrix.device }}-
          enableCrossOsArchive: false

      - name: Cache staging_dir & toolchain (selective)
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/**/*
            openwrt/build_dir/toolchain-*/**/*
            openwrt/build_dir/host/**/*
            !openwrt/staging_dir/**/*.o
            !openwrt/staging_dir/**/*.d
            !openwrt/staging_dir/**/*.cmd
            !openwrt/staging_dir/**/.built
            !openwrt/staging_dir/**/.staged
            !openwrt/staging_dir/**/.configured*
            !openwrt/staging_dir/**/files-*
            !openwrt/staging_dir/**/stamps
          key: staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-${{ matrix.device }}-${{ hashFiles('feeds.conf.default') }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}
          restore-keys: |
            staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-${{ matrix.device }}-
            staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-
          enableCrossOsArchive: false
          fail-on-cache-miss: false

      # ---------------------- System prep & dependencies -----------------------
      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            build-essential ccache \
            libncurses-dev libssl-dev zlib1g-dev \
            libtool-bin autoconf automake \
            python3-setuptools \
            git curl wget rsync gawk unzip time \
            quilt diffstat ed gettext subversion mold \
            asciidoc xmlto sphinxsearch jq gh \
            aria2 axel

      - name: Setup and tune ccache
        run: |
          set -eux
          mkdir -p "${{ env.CCACHE_DIR }}" .ccache
          chmod -R 777 "${{ env.CCACHE_DIR }}" .ccache || true
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export PATH="/usr/lib/ccache:$PATH"
          ccache -M 50G || true
          ccache --set-config=compression=true || true
          ccache --set-config=compression_level=6 || true
          ccache --set-config=sloppiness=file_macro,include_file_mtime,time_macros || true
          ccache --set-config=compiler_check=content || true
          ccache -z || true
          ccache -p || true

      # ---------------------- Clone repos & apply customs -----------------------
      - name: Configure Git for large transfers
        run: |
          git config --global http.postBuffer 1048576000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999

      - name: Clone OpenWrt Base (retry up to 5)
        run: |
          for i in {1..5}; do
            rm -rf openwrt || true
            if git clone --depth 1 -b "$OPENWRT_BRANCH" "$OPENWRT_REPO" openwrt; then
              break
            else
              echo "Clone attempt $i failed, retrying in 15s..."
              sleep 15
            fi
          done
          if [ ! -d openwrt ]; then
            echo "Failed to clone OpenWrt repository after 5 attempts."
            exit 1
          fi

      - name: Setup DL Directory Symlink
        run: |
          mkdir -p "${{ env.DL_DIR }}"
          cd openwrt
          rm -rf dl
          ln -s "${{ env.DL_DIR }}" dl

      - name: Clone GL-MT6000 Customs
        run: |
          rm -rf gl-mt6000 || true
          git clone --depth 1 "$GL_MT6000_REPO" gl-mt6000 || true

      - name: Apply Custom Files
        run: |
          cd openwrt
          if [ -d ../gl-mt6000/files ]; then
            cp -r ../gl-mt6000/files/* files/ 2>/dev/null || true
            echo "Custom files applied"
          fi
          if [ -f ../gl-mt6000/mt6000.config ]; then
            echo "Custom mt6000 config exists (for reference)"
          fi

      # ---------------------- feeds & config -----------------------
      - name: Update and Install Feeds (robust)
        run: |
          set -eux
          cd openwrt
          UPDATED=false
          for i in {1..5}; do
            ./scripts/feeds update -a && UPDATED=true && break || {
              echo "Feed update attempt $i failed, retrying in 15s..."
              sleep 15
            }
          done
          if ! $UPDATED; then
            echo "Failed to update feeds after 5 attempts."
            exit 1
          fi
          ./scripts/feeds install -a

      - name: Apply Custom Config and defconfig
        run: |
          cp "$CONFIG_FILE" openwrt/.config
          cd openwrt
          make defconfig

      # ---------------------- tmpfs + swap + pre-warm -----------------------
      - name: Optimize runner (swap + system tuning)
        run: |
          set -eux
          echo "=== Preparing system environment ==="
          free -h || true
          df -h || true
          TOTAL_MEM=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024)}')
          if sudo -n true 2>/dev/null; then
            echo "Passwordless sudo available."
            if [ "$TOTAL_MEM" -lt 16000 ]; then
              echo "Low memory detected (${TOTAL_MEM}MB). Creating 8GB swap..."
              sudo -n fallocate -l 8G /swapfile || sudo -n dd if=/dev/zero of=/swapfile bs=1M count=8192
              sudo -n chmod 600 /swapfile
              sudo -n mkswap /swapfile
              sudo -n swapon /swapfile
            else
              echo "Sufficient RAM available (${TOTAL_MEM}MB), skipping swap creation."
            fi
            sudo -n sysctl -w vm.swappiness=10 || true
            sudo -n sysctl -w fs.file-max=2097152 || true
          else
            echo "Passwordless sudo not available, skipping privileged optimizations."
            if [ "$TOTAL_MEM" -lt 16000 ]; then
              echo "Warning: Low memory detected (${TOTAL_MEM}MB), but unable to create swap without sudo."
            fi
          fi
          ulimit -n 65535 || true
          free -h
          df -h

      - name: Mount tmpfs for build_dir & tmp (fast-mode and auto-detect)
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.fast == 'true' }}
        run: |
          set -eux
          cd $GITHUB_WORKSPACE
          mkdir -p openwrt/tmp openwrt/build_dir openwrt/build_dir/host || true
          MEM_MB=$(awk '/MemTotal/ {print int($2/1024)}' /proc/meminfo || echo 0)
          SIZE_MB=$(( MEM_MB * 60 / 100 ))
          if [ "$SIZE_MB" -gt 28672 ]; then SIZE_MB=28672; fi
          if [ "$SIZE_MB" -lt 2048 ]; then
            echo "Not enough RAM for substantial tmpfs ($MEM_MB MB) â€” falling back to disk-backed build dirs."
            mkdir -p openwrt/tmp openwrt/build_dir
            chmod -R 777 openwrt/tmp openwrt/build_dir
            exit 0
          fi
          echo "Attempting to mount tmpfs of ${SIZE_MB}M at openwrt/tmp and openwrt/build_dir"
          MOUNT_OK=0
          if sudo -n true 2>/dev/null; then
            if sudo -n mount -t tmpfs -o size=${SIZE_MB}M tmpfs openwrt/tmp 2>/dev/null; then
              MOUNT_OK=1
              echo "Mounted tmpfs at openwrt/tmp"
            else
              echo "Mount tmpfs for openwrt/tmp failed; will continue and try bind fallback"
            fi
            if sudo -n mount -t tmpfs -o size=$((SIZE_MB/2))M tmpfs openwrt/build_dir 2>/dev/null; then
              echo "Mounted tmpfs at openwrt/build_dir"
              MOUNT_OK=1
            else
              echo "Mount tmpfs for openwrt/build_dir failed; attempting bind fallback"
              if [ -d /dev/shm ]; then
                mkdir -p /dev/shm/openwrt-build
                chmod 777 /dev/shm/openwrt-build
                sudo -n mount --bind /dev/shm/openwrt-build openwrt/build_dir || true
                MOUNT_OK=1
              elif [ -d /tmp ]; then
                mkdir -p /tmp/openwrt-build
                chmod 777 /tmp/openwrt-build
                sudo -n mount --bind /tmp/openwrt-build openwrt/build_dir || true
                MOUNT_OK=1
              else
                echo "No tmpfs or bind targets available â€” continuing using disk-backed build_dir"
              fi
            fi
          else
            echo "Passwordless sudo not available, skipping tmpfs mount."
          fi
          if [ "$MOUNT_OK" -eq 1 ]; then
            chmod -R 777 openwrt/tmp openwrt/build_dir || true
          fi

      - name: Pre-warm and show ccache stats
        run: |
          set -eux
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export PATH="/usr/lib/ccache:$PATH"
          echo "ccache stats before build:"
          ccache -s || true

      # ---------------------- Download Sources (robust) -----------------------
      - name: Download Sources (make download with mirror fallbacks)
        shell: bash
        run: |
          set -eux
          cd openwrt
          git config --global http.postBuffer 1048576000 || true
          git config --global core.compression 9 || true
          cat > ~/.wgetrc <<'WGETCFG'
          timeout = 60
          tries = 5
          wait = 20
          retry_connrefused = on
          connection_timeout = 60
          read_timeout = 60
          dns_timeout = 60
          waitretry = 20
          prefer-family = IPv4
          WGETCFG
          cat > ~/.curlrc <<'CURLCFG'
          max-time = 300
          connect-timeout = 60
          retry = 5
          retry-delay = 20
          retry-max-time = 600
          ipv4
          CURLCFG
          mkdir -p dl
          for i in {1..5}; do
            echo "Download attempt $i..."
            rm -f .download_error || true
            case $i in
              1) make download -j"$(nproc)" V=s || touch .download_error ;;
              2) make download -j1 V=s || touch .download_error ;;
              3) make download -j1 V=s BUILD_LOG=1 || touch .download_error ;;
              4) export DOWNLOAD_UTILITIES="curl wget"; make download -j1 V=s || touch .download_error ;;
              5) export DOWNLOAD_UTILITIES="curl wget axel aria2c"; make download -j1 V=s || touch .download_error ;;
            esac
            if [ -f .download_error ]; then
              echo "Download attempt $i failed, waiting then retrying..."
              sleep 30
            else
              echo "Download succeeded"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "All download attempts failed" && exit 1
            fi
          done

      # ---------------------- Build (robust + retries) -----------------------
      - name: Build OpenWrt firmware (smart retries + logs)
        run: |
          set -e -o pipefail
          cd openwrt
          export CCACHE_DIR="$CCACHE_DIR"
          export PATH="/usr/lib/ccache:$PATH"
          export FORCE_UNSAFE_CONFIGURE=1
          ccache -s || true
          if command -v mold >/dev/null 2>&1 && ld --version 2>/dev/null | grep -qi mold; then
            echo "Using mold for linking"
            export LD=mold
          else
            echo "mold not available or not supported; using default linker"
            unset LD || true
          fi
          rm -f build.log || true
          SUCCESS=0
          echo "=== Build attempt 1: parallel (nproc=$(nproc)) ===" | tee -a build.log
          if make -j"$(nproc)" V=s 2>&1 | tee -a build.log; then
            echo "Build succeeded on attempt 1" | tee -a build.log
            SUCCESS=1
          else
            echo "Build attempt 1 failed" | tee -a build.log
          fi
          if [ $SUCCESS -eq 0 ]; then
            echo "=== Build attempt 2: single-threaded (deterministic) ===" | tee -a build.log
            if make -j1 V=s 2>&1 | tee -a build.log; then
              echo "Build succeeded on attempt 2" | tee -a build.log
              SUCCESS=1
            else
              echo "Build attempt 2 failed" | tee -a build.log
            fi
          fi
          if [ $SUCCESS -eq 0 ]; then
            echo "=== Build attempt 3: retry preserve state ===" | tee -a build.log
            if make -j"$(nproc)" V=s 2>&1 | tee -a build.log; then
              echo "Build succeeded on attempt 3" | tee -a build.log
              SUCCESS=1
            else
              echo "Build attempt 3 failed" | tee -a build.log
            fi
          fi
          if [ $SUCCESS -ne 1 ]; then
            echo "All build attempts failed; preserving logs" | tee -a build.log
            chmod -R a+rX .
            exit 1
          fi

      # ---------------------- Collect logs & extract errors -----------------------
      - name: Collect build logs and environment info
        if: always()
        run: |
          set -e
          mkdir -p build-logs
          cd openwrt || exit 0
          cp -f build.log ../build-logs/main-build.log || true
          [ -d logs ] && cp -r logs ../build-logs/ || true
          find build_dir -type f -name "*.log" -print0 | while IFS= read -r -d '' f; do
            dest="../build-logs/$(dirname "${f#build_dir/}")"
            mkdir -p "$dest"
            tail -n 200 "$f" > "$dest/$(basename "$f")" || true
          done
          echo "=== OpenWrt Build Summary ===" > ../build-logs/summary.txt
          date -u >> ../build-logs/summary.txt
          uname -a >> ../build-logs/summary.txt
          echo "" >> ../build-logs/summary.txt
          echo "Disk usage:" >> ../build-logs/summary.txt
          df -h >> ../build-logs/summary.txt || true
          echo "" >> ../build-logs/summary.txt
          echo "Memory usage:" >> ../build-logs/summary.txt
          free -m >> ../build-logs/summary.txt || true
          echo "" >> ../build-logs/summary.txt
          echo "Ulimit info:" >> ../build-logs/summary.txt
          ulimit -a >> ../build-logs/summary.txt || true

      - name: Extract failing package and concise error summary
        if: always()
        run: |
          mkdir -p build-logs
          LOG="openwrt/build.log"
          ERR="build-logs/build-errors.txt"
          echo "=== Error Summary ===" > "$ERR"
          date -u >> "$ERR"
          echo "" >> "$ERR"
          grep -i -E '(^error: |: error:|No rule to make target|recipe for target|undefined reference|collect2: fatal|internal compiler error)' "$LOG" -B3 -A6 | head -n 1000 >> "$ERR" || true
          echo "" >> "$ERR"
          echo "=== Last 200 lines of build.log ===" >> "$ERR"
          tail -n 200 "$LOG" >> "$ERR" || true
          PKG=$(grep -E "package/.*/.*:|Error 2" "$LOG" | sed -E 's/.*package\/([^\/]+)\/([^:]+).*/\1\/\2/' | head -n1 || true)
          if [ -n "$PKG" ]; then
            echo "" >> "$ERR"
            echo "Likely failing package: $PKG" >> "$ERR"
            mkdir -p "build-logs/packages/$PKG"
            find openwrt -type f -path "*/$PKG/*.log" -print0 | while IFS= read -r -d '' p; do
              tail -n 500 "$p" > "build-logs/packages/$PKG/$(basename "$p")" || true
            done
            find openwrt/build_dir -type f -path "*/$PKG/*.log" -print0 | while IFS= read -r -d '' p; do
              tail -n 500 "$p" > "build-logs/packages/$PKG/$(basename "$p")" || true
            done
          else
            echo "Could not infer a single failing package automatically" >> "$ERR"
          fi

      - name: Upload summarized build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.device }}
          path: build-logs/
          if-no-files-found: warn

      - name: Upload raw OpenWrt logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-logs-${{ matrix.device }}
          path: |
            openwrt/build.log
            openwrt/logs/**
            openwrt/build_dir/**/*.log
          if-no-files-found: warn

      # ---------------------- Find & upload artifacts if build succeeded -----------------------
      - name: Verify Build Success and collect images
        if: always()
        run: |
          ARTDIR="openwrt/bin/targets/${TARGET}/${SUBTARGET}"
          echo "Checking for sysupgrade images in $ARTDIR"
          if [ -d "$ARTDIR" ] && ls "$ARTDIR"/*sysupgrade*.bin > /dev/null 2>&1; then
            echo "Build artifacts found in $ARTDIR"
            ls -lh "$ARTDIR" || true
            mkdir -p build-images
            cp -a "$ARTDIR"/*sysupgrade*.bin* build-images/ || true
          else
            echo "ERROR: No sysupgrade images found in $ARTDIR"
            ls -la openwrt/bin/targets || true
            exit 1
          fi

      - name: Optimize Binaries (gzip)
        if: always()
        run: |
          ARTDIR="openwrt/bin/targets/${TARGET}/${SUBTARGET}"
          if [ -d "$ARTDIR" ]; then
            cd "$ARTDIR"
            ls -lh || true
            for f in *sysupgrade*.bin; do
              if [ -f "$f" ]; then
                gzip -9 -c "$f" > "$f".gz || true
              fi
            done
          fi

      - name: Generate Checksums
        if: always()
        run: |
          set -e
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET} || exit 0
          if ls *sysupgrade*.bin.gz > /dev/null 2>&1; then
            sha256sum *sysupgrade*.bin.gz > SHA256SUMS.txt || true
            mkdir -p ../../../../build-images
            cp -a *sysupgrade*.bin.gz SHA256SUMS.txt ../../../../build-images/ || true
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-${{ matrix.device }}-custom
          path: build-images/
          if-no-files-found: warn

      - name: Create GitHub Release (if images present)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET} || exit 0
          DATE=$(date +%F)
          RELEASE_NAME="${DEVICE}-custom-${DATE}"
          if ls *sysupgrade*.bin.gz > /dev/null 2>&1; then
            gh release delete "$RELEASE_NAME" --cleanup-tag -y 2>/dev/null || true
            gh release create "$RELEASE_NAME" \
              --title "Custom OpenWrt $DEVICE Build ($DATE)" \
              --notes "Adapted from GL-MT6000 customs: SSH hardening, UCI QoL, WireGuard/PBR/AdBlock/QoS. Built with ccache and optimizations." \
              *sysupgrade*.bin.gz SHA256SUMS.txt || true
          else
            echo "No images present; skipping release creation."
          fi

      - name: Build Summary (upload to job summary)
        if: always()
        run: |
          set -eux
          echo "### Custom Build Summary for $DEVICE" >> $GITHUB_STEP_SUMMARY || true
          if [ -d openwrt/bin/targets/${TARGET}/${SUBTARGET} ]; then
            IMAGE_SIZE=$(du -h openwrt/bin/targets/${TARGET}/${SUBTARGET}/*sysupgrade*.bin.gz 2>/dev/null | cut -f1 || true)
            echo "- Image size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY || true
          fi
          echo "- CCACHE Stats:" >> $GITHUB_STEP_SUMMARY || true
          ccache -s >> $GITHUB_STEP_SUMMARY || true
          echo "- Base Repo: Official OpenWrt + GL-MT6000 customs" >> $GITHUB_STEP_SUMMARY || true
          echo "- OpenWrt Branch: $OPENWRT_BRANCH" >> $GITHUB_STEP_SUMMARY || true
          echo "- Config File: $CONFIG_FILE (WR3000 params + customs)" >> $GITHUB_STEP_SUMMARY || true

      - name: Cleanup swap & unmount tmpfs (safe)
        if: always()
        run: |
          set -eux
          if sudo -n true 2>/dev/null; then
            if mountpoint -q openwrt/build_dir; then
              sudo -n umount -l openwrt/build_dir || true
            fi
            if mountpoint -q openwrt/tmp; then
              sudo -n umount -l openwrt/tmp || true
            fi
            if grep -q "/swapfile" /proc/swaps; then
              echo "Removing swap..."
              sudo -n swapoff /swapfile || true
              sudo -n rm -f /swapfile || true
            fi
          else
            echo "Passwordless sudo not available, skipping cleanup of privileged resources."
          fi