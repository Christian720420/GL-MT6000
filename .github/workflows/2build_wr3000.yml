name: Advanced OpenWrt WR3000 Custom Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * *" # Daily 03:00 UTC build

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git  # GitHub mirror for stability
  OPENWRT_BRANCH: openwrt-24.10
  GL_MT6000_REPO: https://github.com/Christian720420/GL-MT6000.git
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  DL_DIR: ${{ github.workspace }}/dl

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 600
    strategy:
      matrix:
        device: [cudy_wr3000-v1]
    env:
      DEVICE: ${{ matrix.device }}
      CONFIG_FILE: "wr3000.config"
      TARGET: mediatek
      SUBTARGET: filogic

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ runner.os }}-${{ hashFiles(env.CONFIG_FILE) }}
          restore-keys: dl-${{ runner.os }}-

      - name: Cache CCACHE
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles(env.CONFIG_FILE) }}
          restore-keys: ccache-${{ runner.os }}-${{ matrix.device }}-

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            build-essential ccache \
            libncurses-dev libssl-dev zlib1g-dev \
            libtool-bin autoconf automake \
            python3-setuptools \
            git curl wget rsync gawk unzip time \
            quilt diffstat ed gettext subversion mold \
            asciidoc xmlto sphinxsearch

      - name: Setup ccache
        run: |
          mkdir -p "$CCACHE_DIR"
          export CCACHE_DIR="$CCACHE_DIR"
          export PATH="/usr/lib/ccache:$PATH"
          ccache -M 20G
          ccache -z
        shell: bash

      - name: Clean Old Build
        run: |
          rm -rf openwrt
          mkdir -p "$DL_DIR"

      - name: Configure Git
        run: |
          git config --global http.postBuffer 1048576000  # 1 GB buffer for large transfers
          git config --global http.version HTTP/1.1
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999

      - name: Clone OpenWrt Base
        run: |
          for i in {1..5}; do
            git clone --depth 1 -b "$OPENWRT_BRANCH" "$OPENWRT_REPO" openwrt && break || {
              echo "Clone attempt $i failed, retrying in 15s..."
              sleep 15
              rm -rf openwrt  # Clean up partial clone
            }
          done

      - name: Clone GL-MT6000 Customs
        run: |
          git clone --depth 1 "$GL_MT6000_REPO" gl-mt6000

      - name: Apply Custom Files
        run: |
          cd openwrt
          if [ -d ../gl-mt6000/files ]; then
            cp -r ../gl-mt6000/files/* files/ 2>/dev/null || true
            echo "Custom files applied: SSH hardening, UCI defaults, upgrade script"
          fi
          if [ -f ../gl-mt6000/mt6000.config ]; then
            echo "GL-MT6000 config available for reference; ensure wr3000.config includes desired packages (e.g., luci-app-pbr, adblock)"
          fi

      - name: Update and Install Feeds
        run: |
          cd openwrt
          git config --global http.postBuffer 1048576000
          for i in {1..5}; do
            ./scripts/feeds update -a && break || {
              echo "Feed update attempt $i failed, retrying in 15s..."
              sleep 15
            }
          done
          ./scripts/feeds install -a

      - name: Apply Custom Config
        run: |
          cp "$CONFIG_FILE" openwrt/.config
          cd openwrt
          make defconfig

      - name: Download Sources
        run: |
          cd openwrt
          make download -j"$(nproc)" V=s || make download -j1 V=s

      - name: Pre-build diagnostics
        shell: bash
        run: |
          echo "=== Disk usage ==="
          df -h || true
          echo "=== Free memory ==="
          free -m || true
          echo "=== Ulimit ==="
          ulimit -a || true
          echo "=== Temp dir usage (openwrt/tmp) ==="
          du -sh openwrt/tmp 2>/dev/null || true
          echo "=== Top build_dir sizes ==="
          du -sh openwrt/build_dir/* 2>/dev/null | sort -h | tail -n 50 || true
          echo "=== Which toolchain/binaries ==="
          which strip || true
          which ld || true
          strip --version 2>/dev/null || true
          ld --version 2>/dev/null || true
          echo "=== file descriptors ==="
          ls -l /proc/$$/fd 2>/dev/null || true

      - name: Build Firmware
        shell: bash
        run: |
          set -o pipefail
          cd openwrt
          export CCACHE_DIR="$CCACHE_DIR"
          export PATH="/usr/lib/ccache:$PATH"
          export LD=mold
          rm -f build.log
          SUCCESS=0
          for i in {1..3}; do
            echo "Starting build attempt $i" | tee -a build.log
            if make -j"$(nproc)" V=s 2>&1 | tee -a build.log; then
              echo "Build attempt $i succeeded" | tee -a build.log
              SUCCESS=1
              break
            else
              echo "Build attempt $i failed, cleaning and retrying..." | tee -a build.log
              make clean >> build.log 2>&1 || true
              sleep 30
            fi
          done
          if [ "$SUCCESS" -ne 1 ]; then
            echo "All build attempts failed; see openwrt/build.log" | tee -a build.log
            exit 1
          fi

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.device }}
          path: openwrt/build.log

      - name: Verify Build Success
        run: |
          ARTDIR="openwrt/bin/targets/${TARGET}/${SUBTARGET}"
          echo "Checking for sysupgrade images in $ARTDIR"
          if [ -d "$ARTDIR" ] && ls "$ARTDIR"/*sysupgrade*.bin > /dev/null 2>&1; then
            echo "Build artifacts found in $ARTDIR"
            ls -lh "$ARTDIR" || true
          else
            echo "ERROR: No sysupgrade images found in $ARTDIR"
            echo "Listing openwrt/bin/targets for debugging:" 
            ls -la openwrt/bin/targets || true
            echo "Top-level openwrt directory listing:" 
            ls -la openwrt || true
            echo "Tail of possible build log (if present):" 
            [ -f openwrt/build.log ] && tail -n 200 openwrt/build.log || true
            # Fail early so remaining steps don't attempt to operate on missing artifacts
            exit 1
          fi
        shell: bash

      - name: Optimize Binaries
        run: |
          ARTDIR="openwrt/bin/targets/${TARGET}/${SUBTARGET}"
          if [ -d "$ARTDIR" ]; then
            echo "Optimizing binaries in $ARTDIR"
            cd "$ARTDIR"
            # Show files for debugging
            ls -lh || true
            # Strip all sysupgrade binaries if present
            find . -type f -name "*sysupgrade*.bin" -print0 | xargs -0 --no-run-if-empty strip --strip-unneeded || true
            # Compress only files that exist
            for f in *sysupgrade*.bin; do
              if [ -f "$f" ]; then
                gzip -9 "$f" || true
              fi
            done
          else
            echo "No artifacts directory $ARTDIR; skipping optimization step"
            ls -la openwrt/bin/targets || true
            exit 0
          fi
        shell: bash

      - name: Generate Checksums
        run: |
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET}
          sha256sum *sysupgrade*.bin.gz > SHA256SUMS.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-${{ matrix.device }}-custom
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET}
          DATE=$(date +%F)
          RELEASE_NAME="${DEVICE}-custom-${DATE}"
          gh release delete "$RELEASE_NAME" --cleanup-tag -y 2>/dev/null || true
          gh release create "$RELEASE_NAME" \
            --title "Custom OpenWrt $DEVICE Build ($DATE)" \
            --notes "Adapted from GL-MT6000 customs: SSH hardening, UCI QoL, WireGuard/PBR/AdBlock/QoS. Built with ccache and optimizations." \
            *sysupgrade*.bin.gz SHA256SUMS.txt

      - name: Build Summary
        run: |
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET}
          IMAGE_SIZE=$(du -h *sysupgrade*.bin.gz | cut -f1)
          echo "### Custom Build Summary for $DEVICE" >> $GITHUB_STEP_SUMMARY
          echo "- Image size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- CCACHE Stats:" >> $GITHUB_STEP_SUMMARY
          ccache -s >> $GITHUB_STEP_SUMMARY
          echo "- Base Repo: Official OpenWrt + GL-MT6000 customs" >> $GITHUB_STEP_SUMMARY
          echo "- OpenWrt Branch: $OPENWRT_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "- Config File: $CONFIG_FILE (WR3000 params + customs)" >> $GITHUB_STEP_SUMMARY
