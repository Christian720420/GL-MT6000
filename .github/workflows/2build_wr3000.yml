name: Advanced OpenWrt WR3000 Custom Build

on:
  workflow_dispatch:
    inputs:
      fast:
        description: 'Enable fast build mode (lighter config, tmpfs use if available)'
        required: false
        default: 'false'
  push:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * *" # Daily 03:00 UTC build

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git  # GitHub mirror for stability
  OPENWRT_BRANCH: openwrt-24.10
  GL_MT6000_REPO: https://github.com/Christian720420/GL-MT6000.git
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  DL_DIR: ${{ github.workspace }}/dl

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 600
    strategy:
      matrix:
        device: [cudy_wr3000-v1]
    env:
      DEVICE: ${{ matrix.device }}
      CONFIG_FILE: "wr3000.config"
      TARGET: mediatek
      SUBTARGET: filogic

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.DL_DIR }}
            dl
            openwrt/dl
          key: dl-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            dl-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-
            dl-${{ runner.os }}-${{ matrix.device }}-
            dl-${{ runner.os }}-

      - name: Cache CCACHE
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            .ccache
          key: ccache-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-${{ hashFiles('feeds.conf.default') }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-${{ hashFiles('feeds.conf.default') }}-
            ccache-${{ runner.os }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-
            ccache-${{ runner.os }}-${{ matrix.device }}-

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            build-essential ccache \
            libncurses-dev libssl-dev zlib1g-dev \
            libtool-bin autoconf automake \
            python3-setuptools \
            git curl wget rsync gawk unzip time \
            quilt diffstat ed gettext subversion mold \
            asciidoc xmlto sphinxsearch

      - name: Setup ccache
        run: |
          mkdir -p "$CCACHE_DIR"
          export CCACHE_DIR="$CCACHE_DIR"
          export PATH="/usr/lib/ccache:$PATH"
          export CCACHE_COMPRESS=1     # enable compression
          ccache -M 50G
          ccache -z
        shell: bash

      - name: Prepare Build Directories
        run: |
          rm -rf openwrt
          # Create and prepare download directories
          mkdir -p "$DL_DIR" dl "openwrt/dl"
          # Create ccache directory
          mkdir -p "$CCACHE_DIR" .ccache
          # Ensure proper permissions
          chmod -R 777 "$DL_DIR" dl "openwrt/dl" "$CCACHE_DIR" .ccache

      - name: Configure Git
        run: |
          git config --global http.postBuffer 1048576000  # 1 GB buffer for large transfers
          git config --global http.version HTTP/1.1
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999

      - name: Clone OpenWrt Base
        run: |
          for i in {1..5}; do
            git clone --depth 1 -b "$OPENWRT_BRANCH" "$OPENWRT_REPO" openwrt && break || {
              echo "Clone attempt $i failed, retrying in 15s..."
              sleep 15
              rm -rf openwrt  # Clean up partial clone
            }
          done

      - name: Clone GL-MT6000 Customs
        run: |
          git clone --depth 1 "$GL_MT6000_REPO" gl-mt6000

      - name: Apply Custom Files
        run: |
          cd openwrt
          if [ -d ../gl-mt6000/files ]; then
            cp -r ../gl-mt6000/files/* files/ 2>/dev/null || true
            echo "Custom files applied: SSH hardening, UCI defaults, upgrade script"
          fi
          if [ -f ../gl-mt6000/mt6000.config ]; then
            echo "GL-MT6000 config available for reference; ensure wr3000.config includes desired packages (e.g., luci-app-pbr, adblock)"
          fi

      - name: Update and Install Feeds
        run: |
          cd openwrt
          git config --global http.postBuffer 1048576000
          for i in {1..5}; do
            ./scripts/feeds update -a && break || {
              echo "Feed update attempt $i failed, retrying in 15s..."
              sleep 15
            }
          done
          ./scripts/feeds install -a

      - name: Apply Custom Config
        run: |
          cp "$CONFIG_FILE" openwrt/.config
          cd openwrt
          make defconfig

      - name: Prepare Staging Directories
        run: |
          cd openwrt
          mkdir -p staging_dir
          mkdir -p build_dir/host
          mkdir -p tmp
          # Create standard toolchain directories
          mkdir -p staging_dir/host
          mkdir -p staging_dir/toolchain-*
          mkdir -p staging_dir/target-*
          # Set permissions
          chmod -R 777 staging_dir build_dir tmp

      - name: Cache staging_dir & toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir
            openwrt/build_dir/toolchain-*
            openwrt/build_dir/host
            openwrt/tmp
          key: staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-${{ matrix.device }}-${{ hashFiles(format('{0}', env.CONFIG_FILE)) }}-
            staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-${{ matrix.device }}-
            staging-${{ runner.os }}-${{ env.OPENWRT_BRANCH }}-

      - name: Fast-mode config tweaks
        if: ${{ github.event.inputs.fast == 'true' }}
        shell: bash
        run: |
          set -e
          cd openwrt
          echo "Applying fast-mode tweaks to .config (disabling LTO/GC_SECTIONS and lowering -O3->-O2)"
          sed -i '/^CONFIG_USE_LTO=/d' .config || true
          sed -i '/^CONFIG_USE_GC_SECTIONS=/d' .config || true
          sed -i 's/-O3/-O2/g' .config || true
          make defconfig

      - name: Download Sources
        run: |
          cd openwrt
          make download -j"$(nproc)" V=s || make download -j1 V=s

      - name: Mount tmpfs for openwrt/tmp (fast mode)
        if: ${{ github.event.inputs.fast == 'true' }}
        shell: bash
        run: |
          # Only attempt on Linux self-hosted runner
          if [ "$(uname -s)" != "Linux" ]; then
            echo "Not Linux: skip tmpfs"
            exit 0
          fi
          mkdir -p openwrt/tmp
          MEM=$(free -m | awk '/Mem:/ {print $2}')
          # size = half RAM, cap 20000 MB
          SIZE=$(( MEM / 2 ))
          if [ "$SIZE" -gt 20000 ]; then SIZE=20000; fi
          echo "Attempting to mount tmpfs ${SIZE}M at openwrt/tmp (requires sudo)"
          sudo mount -t tmpfs -o size=${SIZE}M tmpfs openwrt/tmp || {
            echo "mount tmpfs failed or no sudo, continuing without tmpfs"
          }

      - name: Configure compiler optimizations
        shell: bash
        run: |
          # Set GCC parameters for faster compilation
          export NPROC=$(nproc)
          # Enable advanced GCC optimizations for C++
          export CFLAGS="$CFLAGS -pipe -fno-semantic-interposition"
          export CXXFLAGS="$CXXFLAGS -pipe -fno-semantic-interposition -fno-enforce-eh-specs"
          # Fine-tune GCC for cc1plus acceleration
          export GCC_EXTRA_ARGS="-fno-inline-functions-called-once -fno-inline-small-functions -fno-expensive-optimizations -fno-tree-vectorize"
          # Add ccache to path
          export PATH="/usr/lib/ccache:$PATH"
          # Configure ccache
          ccache --max-size=50G
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache --set-config=sloppiness=file_macro,include_file_mtime,time_macros
          ccache --set-config=compiler_check=content
          
      - name: Pre-build diagnostics
        shell: bash
        run: |
          echo "=== Disk usage ==="
          df -h || true
          echo "=== Free memory ==="
          free -m || true
          echo "=== Ulimit ==="
          ulimit -a || true
          echo "=== Temp dir usage (openwrt/tmp) ==="
          du -sh openwrt/tmp 2>/dev/null || true
          echo "=== Top build_dir sizes ==="
          du -sh openwrt/build_dir/* 2>/dev/null | sort -h | tail -n 50 || true
          echo "=== Which toolchain/binaries ==="
          which strip || true
          which ld || true
          strip --version 2>/dev/null || true
          ld --version 2>/dev/null || true
          echo "=== file descriptors ==="
          ls -l /proc/$$/fd 2>/dev/null || true

      - name: Build Firmware
        shell: bash
        run: |
          set -o pipefail
          cd openwrt
          export CCACHE_DIR="$CCACHE_DIR"
          export PATH="/usr/lib/ccache:$PATH"
          export LD=mold
          # Optimize cc1plus memory usage
          export CCACHE_MAXSIZE=50G
          export CCACHE_SLOPPINESS=file_macro,include_file_mtime,time_macros
          export CCACHE_COMPILERCHECK=content
          export CCACHE_COMPRESS=1
          export CCACHE_NODIRECT=1
          rm -f build.log
          SUCCESS=0
          for i in {1..3}; do
            echo "Starting build attempt $i" | tee -a build.log
            if make -j"$(nproc)" V=s 2>&1 | tee -a build.log; then
              echo "Build attempt $i succeeded" | tee -a build.log
              SUCCESS=1
              break
            else
              echo "Build attempt $i failed, retrying without full clean (preserve state)..." | tee -a build.log
              sleep 30
            fi
          done
          if [ "$SUCCESS" -ne 1 ]; then
            echo "All build attempts failed; see openwrt/build.log" | tee -a build.log
            exit 1
          fi

      - name: Collect build logs
        if: always()
        shell: bash
        run: |
          mkdir -p build-logs
          if [ -f openwrt/build.log ]; then
            cp openwrt/build.log build-logs/
          fi
          if [ -d openwrt/logs ]; then
            cp -r openwrt/logs/* build-logs/ || true
          fi
      - name: Extract build errors
        if: always()
        shell: bash
        run: |
          if [ -f build-logs/build-errors.txt ]; then
            rm -f build-logs/build-errors.txt
          fi
          if [ -f openwrt/build.log ]; then
            grep -i -E 'error:|failed|undefined|not found|No rule to make target' openwrt/build.log > build-logs/build-errors.txt || true
          fi
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.device }}
          path: build-logs/
          if-no-files-found: warn
      - name: Upload build error summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-errors-${{ matrix.device }}
          path: build-logs/build-errors.txt
          if-no-files-found: warn
      - name: Find build artifacts
        if: always()
        shell: bash

        - name: Extract build errors
          if: always()
          shell: bash
          run: |
            mkdir -p build-logs
            if [ -f openwrt/build.log ]; then
              grep -i -E 'error:|failed|undefined|not found|No rule to make target' openwrt/build.log > build-logs/build-errors.txt || true
            fi

        run: |
          echo "=== Looking for curl build artifacts ==="
          find openwrt/build_dir -name "curl*" -type d -ls || true
          find openwrt/staging_dir -name "curl*" -type d -ls || true
          
      - name: Upload package build artifacts
        if: always()

        - name: Upload build error summary
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: build-errors-${{ matrix.device }}
            path: build-logs/build-errors.txt
            if-no-files-found: warn
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.device }}
          path: |
            openwrt/build_dir/**/package/curl/**/*
            openwrt/staging_dir/**/package/curl/**/*
            openwrt/logs/**/*curl*.log
            openwrt/logs/**/*curl*.txt
          if-no-files-found: warn
          compression-level: 6
          retention-days: 5

      - name: Verify Build Success
        run: |
          ARTDIR="openwrt/bin/targets/${TARGET}/${SUBTARGET}"
          echo "Checking for sysupgrade images in $ARTDIR"
          if [ -d "$ARTDIR" ] && ls "$ARTDIR"/*sysupgrade*.bin > /dev/null 2>&1; then
            echo "Build artifacts found in $ARTDIR"
            ls -lh "$ARTDIR" || true
          else
            echo "ERROR: No sysupgrade images found in $ARTDIR"
            echo "Listing openwrt/bin/targets for debugging:" 
            ls -la openwrt/bin/targets || true
            echo "Top-level openwrt directory listing:" 
            ls -la openwrt || true
            echo "Tail of possible build log (if present):" 
            [ -f openwrt/build.log ] && tail -n 200 openwrt/build.log || true
            # Fail early so remaining steps don't attempt to operate on missing artifacts
            exit 1
          fi
        shell: bash

      - name: Optimize Binaries
        run: |
          ARTDIR="openwrt/bin/targets/${TARGET}/${SUBTARGET}"
          if [ -d "$ARTDIR" ]; then
            echo "Optimizing binaries in $ARTDIR"
            cd "$ARTDIR"
            # Show files for debugging
            ls -lh || true
            # Strip all sysupgrade binaries if present
            find . -type f -name "*sysupgrade*.bin" -print0 | xargs -0 --no-run-if-empty strip --strip-unneeded || true
            # Compress only files that exist
            for f in *sysupgrade*.bin; do
              if [ -f "$f" ]; then
                gzip -9 "$f" || true
              fi
            done
          else
            echo "No artifacts directory $ARTDIR; skipping optimization step"
            ls -la openwrt/bin/targets || true
            exit 0
          fi
        shell: bash

      - name: Generate Checksums
        run: |
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET}
          sha256sum *sysupgrade*.bin.gz > SHA256SUMS.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-${{ matrix.device }}-custom
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET}
          DATE=$(date +%F)
          RELEASE_NAME="${DEVICE}-custom-${DATE}"
          gh release delete "$RELEASE_NAME" --cleanup-tag -y 2>/dev/null || true
          gh release create "$RELEASE_NAME" \
            --title "Custom OpenWrt $DEVICE Build ($DATE)" \
            --notes "Adapted from GL-MT6000 customs: SSH hardening, UCI QoL, WireGuard/PBR/AdBlock/QoS. Built with ccache and optimizations." \
            *sysupgrade*.bin.gz SHA256SUMS.txt

      - name: Build Summary
        run: |
          cd openwrt/bin/targets/${TARGET}/${SUBTARGET}
          IMAGE_SIZE=$(du -h *sysupgrade*.bin.gz | cut -f1)
          echo "### Custom Build Summary for $DEVICE" >> $GITHUB_STEP_SUMMARY
          echo "- Image size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- CCACHE Stats:" >> $GITHUB_STEP_SUMMARY
          ccache -s >> $GITHUB_STEP_SUMMARY
          echo "- Base Repo: Official OpenWrt + GL-MT6000 customs" >> $GITHUB_STEP_SUMMARY
          echo "- OpenWrt Branch: $OPENWRT_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "- Config File: $CONFIG_FILE (WR3000 params + customs)" >> $GITHUB_STEP_SUMMARY
