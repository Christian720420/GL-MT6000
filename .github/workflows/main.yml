name: Build OpenWrt for GL-MT6000 (Self-Hosted)

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: "38 1 * * *"   # daily at 01:38 UTC

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git
  OPENWRT_BRANCH: openwrt-24.10
  CONFIG_FILE: mt6000.config
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_COMPRESS: "1"
  CCACHE_COMPILERCHECK: content
  CC: "ccache gcc"
  CXX: "ccache g++"

jobs:
  build:
    # If you have multiple self-hosted runners, add a unique label, e.g.:
    # runs-on: [self-hosted, X64, Linux, runner-01]
    runs-on: [self-hosted, X64, Linux]
    steps:

      # -------------------------------------------------
      # 0. **FORCE CLEAN** – remove any leftover workspace & runner diag files
      # -------------------------------------------------
      - name: Clean workspace and runner diagnostics
        run: |
          # Workspace
          rm -rf "${{ github.workspace }}"/* || true
          # Runner diagnostic pages (prevents "file already exists" error)
          DIAG_DIR="${{ runner.temp }}/_diag/pages"
          [ -d "$DIAG_DIR" ] && rm -rf "$DIAG_DIR"/* || true

      # -------------------------------------------------
      # 1. Checkout GL-MT6000 repository (source of .config & files)
      # -------------------------------------------------
      - name: Checkout GL-MT6000 repository
        uses: actions/checkout@v4
        with:
          repository: Christian720420/GL-MT6000
          path: source_repo

      # -------------------------------------------------
      # 2. Install system dependencies
      # -------------------------------------------------
      - name: Install dependencies
        run: |
          echo "2323" | sudo -S apt update -qq
          sudo apt install -y \
            build-essential libncurses-dev libssl-dev \
            python3-setuptools zlib1g-dev libtool \
            autoconf automake pkg-config git curl wget \
            ccache rsync gawk unzip

      # -------------------------------------------------
      # 3. Cache ccache – deterministic + tiered fallbacks
      # -------------------------------------------------
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: >-
            selfrunner-ccache-${{ runner.os }}-${{ runner.arch }}-
            ${{ hashFiles('source_repo/${{ env.CONFIG_FILE }}') }}-
            ${{ hashFiles('source_repo/feeds.conf*') || 'no-feeds' }}
          restore-keys: |
            selfrunner-ccache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('source_repo/${{ env.CONFIG_FILE }}') }}-
            selfrunner-ccache-${{ runner.os }}-${{ runner.arch }}-
            selfrunner-ccache-

      # -------------------------------------------------
      # 4. Show ccache stats
      # -------------------------------------------------
      - name: Show ccache status
        run: ccache --show-stats || true

      # -------------------------------------------------
      # 5. Clone OpenWrt (always fresh)
      # -------------------------------------------------
      - name: Clone OpenWrt
        run: |
          rm -rf openwrt
          git clone --depth 1 -b ${{ env.OPENWRT_BRANCH }} ${{ env.OPENWRT_REPO }} openwrt
          cd openwrt

          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999
          git config --global core.compression 0
          git config --global url."https://github.com/".insteadOf git://github.com/

          for i in {1..5}; do
            ./scripts/feeds update -a && ./scripts/feeds install -a && break
            echo "Feed update failed (attempt $i) – retrying in 20s..."
            sleep 20
          done

      # -------------------------------------------------
      # 6. Prepare build environment
      # -------------------------------------------------
      - name: Prepare OpenWrt build
        run: |
          cd openwrt
          cp ../source_repo/${{ env.CONFIG_FILE }} .config
          [ -d ../source_repo/files ] && cp -r ../source_repo/files ./files || true
          make defconfig

      # -------------------------------------------------
      # 7. Build firmware
      # -------------------------------------------------
      - name: Build firmware
        run: |
          cd openwrt
          make download -j1 || { sleep 10; make download -j1 V=s; }
          echo "Building with $(nproc) threads..."
          make -j$(nproc) V=s || { echo "Parallel build failed – falling back to -j1"; make -j1 V=s; }

          mkdir -p ../firmware
          find bin -type f \
            \( -iname '*sysupgrade*.bin' -o -iname 'sha256sums' -o -iname 'config.buildinfo' \) \
            -exec mv -v {} ../firmware/ \;
          mv .config ../firmware/full.config

      # -------------------------------------------------
      # 8. Upload artifacts
      # -------------------------------------------------
      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gl-mt6000-firmware
          path: firmware/*

      # -------------------------------------------------
      # 9. Create GitHub release
      # -------------------------------------------------
      - name: Create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RELEASE_DATE=$(date +%F)
          gh release delete "gl-mt6000-${RELEASE_DATE}" --cleanup-tag -y --repo "${{ github.repository }}" 2>/dev/null || true
          gh release create "gl-mt6000-${RELEASE_DATE}" \
            --repo "${{ github.repository }}" \
            --title "OpenWrt Custom Build for GL-MT6000 (${RELEASE_DATE})" \
            --notes "Built with \`${{ env.CONFIG_FILE }}\` from **${{ env.OPENWRT_BRANCH }}**." \
            firmware/*

      # -------------------------------------------------
      # 10. Prune old releases (keep latest 6)
      # -------------------------------------------------
      - name: Clean up old releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/releases --paginate --jq '.[6:] | .[] | "\(.id) \(.tag_name)"' | while read -r id tag; do
            [ -n "$id" ] || continue
            echo "Deleting old release $tag"
            gh api -X DELETE "repos/${{ github.repository }}/releases/$id"
            gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$tag" 2>/dev/null || true
          done

      # -------------------------------------------------
      # 11. Summary
      # -------------------------------------------------
      - name: Summary
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ### ✅ Build Complete for GL-MT6000
          - Branch: \`${{ env.OPENWRT_BRANCH }}\`
          - Config: \`${{ env.CONFIG_FILE }}\`
          - Release: [View Latest](https://github.com/${{ github.repository }}/releases/latest)
          EOF
