name: Build OpenWrt for GL-MT6000 (Debian Runner)

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: "38 1 * * *"   # daily at 01:38 UTC

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git
  OPENWRT_BRANCH: openwrt-24.10
  CONFIG_FILE: mt6000.config
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: "1"
  CCACHE_COMPILERCHECK: content

jobs:
  build:
    runs-on: debian   # ‚Üê Matches your runner label
    steps:

      # -------------------------------------------------
      # 0. CLEAN DIAGNOSTICS & WORKSPACE
      # -------------------------------------------------
      - name: Clean runner diagnostics and workspace
        run: |
          RUNNER_TEMP="${{ runner.temp }}"
          DIAG_PAGES="$RUNNER_TEMP/_diag/pages"
          echo "Cleaning: $DIAG_PAGES"
          [ -d "$DIAG_PAGES" ] && rm -rf "$DIAG_PAGES"/* || true

          DIAG_ROOT="${RUNNER_TEMP%/*}/_diag"
          [ -d "$DIAG_ROOT" ] && find "$DIAG_ROOT" -name "*.log" -delete || true

          echo "Cleaning workspace: ${{ github.workspace }}"
          rm -rf "${{ github.workspace }}"/* || true

      # -------------------------------------------------
      # 1. Checkout config repo
      # -------------------------------------------------
      - name: Checkout GL-MT6000 config
        uses: actions/checkout@v4
        with:
          repository: Christian720420/GL-MT6000
          path: source_repo

      # -------------------------------------------------
      # 2. Install Debian packages
      # -------------------------------------------------
      - name: Install dependencies
        run: |
          echo "2323" | sudo APT_UPDATE=1 apt update -qq
          echo "2323" | sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            build-essential libncurses5-dev libssl-dev \
            python3-setuptools zlib1g-dev libtool-bin \
            autoconf automake pkg-config git curl wget \
            ccache rsync gawk unzip time

      # -------------------------------------------------
      # 3. Cache ccache
      # -------------------------------------------------
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-debian-${{ hashFiles('source_repo/${{ env.CONFIG_FILE }}') }}-${{ hashFiles('source_repo/feeds.conf*') || 'nofeeds' }}
          restore-keys: |
            ccache-debian-${{ hashFiles('source_repo/${{ env.CONFIG_FILE }}') }}-
            ccache-debian-

      - name: ccache stats
        run: ccache -s

      # -------------------------------------------------
      # 4. Clone
