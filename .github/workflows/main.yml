name: Build OpenWrt for Cudy WR3000

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'OpenWrt version'
        default: 'openwrt-24.10'
      target:
        description: 'Target'
        default: 'mediatek/filogic'
      profile:
        description: 'Device profile'
        default: 'cudy_wr3000-v1'
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly build

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  OPENWRT_VERSION: ${{ github.event.inputs.openwrt_version || 'openwrt-24.10' }}
  TARGET: ${{ github.event.inputs.target || 'mediatek/filogic' }}
  PROFILE: ${{ github.event.inputs.profile || 'cudy_wr3000-v1' }}

jobs:
  build:
    runs-on: self-hosted  # Assumes Linux-based self-hosted runner
    steps:
      - name: Verify Runner Environment
        run: |
          if [[ ! "$RUNNER_OS" == "Linux" ]]; then
            echo "Error: This workflow requires a Linux-based self-hosted runner."
            exit 1
          fi
          if ! command -v gcc &> /dev/null; then
            echo "Error: GCC not found. Ensure build dependencies are installed."
            exit 1
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache OpenWrt Downloads, Feeds, Toolchain, and ccache
        uses: actions/cache@v4
        with:
          path: |
            openwrt/dl
            openwrt/feeds
            openwrt/staging_dir
            openwrt/tmp
            ~/.ccache
          key: ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ env.TARGET }}-${{ env.PROFILE }}-${{ hashFiles('.config', 'openwrt/feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ env.TARGET }}-
            ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-

      - name: Install Dependencies and ccache
        run: |
          sudo apt-get update -y || true
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            rsync unzip zlib1g-dev file wget subversion python3 python3-pip \
            ccache --no-install-recommends || true
          ccache --version || { echo "Error: ccache installation failed"; exit 1; }

      - name: Clone OpenWrt Source
        run: |
          git clone ${{ env.REPO_URL }} -b ${{ env.OPENWRT_VERSION }} openwrt
          if [ -f .config ]; then
            mv .config openwrt/.config
          else
            echo "Error: .config file not found in repository root"
            exit 1
          fi
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure Build
        run: |
          cd openwrt
          echo "CONFIG_TARGET_${{ env.TARGET }}=y" >> .config
          echo "CONFIG_TARGET_PROFILE=${{ env.PROFILE }}" >> .config
          echo "CONFIG_TARGET_OPTIMIZATION=\"-O2 -pipe\"" >> .config
          echo "CONFIG_CCACHE=y" >> .config
          make defconfig

      - name: Download and Build with ccache
        run: |
          cd openwrt
          export CCACHE_DIR="$HOME/.ccache"
          export CCACHE_BASEDIR="$PWD"
          export CCACHE_LOGFILE="$PWD/ccache.log"
          export CC="ccache gcc"
          export CXX="ccache g++"
          make download -j$(nproc)
          make -j$(nproc) V=s

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-cudy-wr3000-${{ env.OPENWRT_VERSION }}
          path: openwrt/bin/targets/${{ env.TARGET }}/*/*.bin
          retention-days: 7
