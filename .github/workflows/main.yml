name: Build OpenWrt for Cudy WR3000

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      force_clean:
        description: 'Force clean build (skip cache)'
        default: 'false'
      openwrt_branch:
        description: 'OpenWrt Branch'
        default: 'openwrt-24.10'
  push:
    branches:
      - main
  schedule:
    - cron: "0 2 * * 0"  # Weekly on Sunday at 2 AM UTC

env:
  CONFIG_FILE: wr3000.config
  TARGET: mediatek/filogic
  PROFILE: cudy_wr3000-v1
  OPENWRT_VERSION: openwrt-24.10

jobs:
  build:
    name: Build OpenWrt Firmware
    runs-on: [self-hosted, openwrt-linux]
    steps:
      - name: Verify Self-Hosted Runner Environment
        run: |
          echo "=== Runner Environment Check ==="
          echo "OS: $RUNNER_OS"
          echo "Architecture: $(uname -m)"
          echo "Runner Labels: ${{ join(runner.labels, ', ') }}"
          
          # Check OS
          if [[ ! "$RUNNER_OS" == "Linux" ]]; then
            echo "❌ Error: This workflow requires a Linux-based self-hosted runner."
            exit 1
          fi
          
          # Check architecture
          ARCH=$(uname -m)
          if [[ ! "$ARCH" =~ ^(aarch64|arm64|x86_64)$ ]]; then
            echo "❌ Error: Runner architecture must be ARM64 or x86_64. Found: $ARCH"
            exit 1
          fi
          
          # Check disk space (need at least 30GB free)
          FREE_SPACE=$(df / | awk 'NR==2 {print $4}')
          if [[ $FREE_SPACE -lt 30000000 ]]; then
            echo "⚠️  Warning: Low disk space. Free: ${FREE_SPACE}KB (need ~30GB)"
          else
            echo "✅ Disk space sufficient"
          fi
          
          # Check essential tools
          if ! command -v gcc &> /dev/null; then
            echo "❌ Error: GCC not found"
            exit 1
          fi
          echo "✅ GCC available: $(gcc --version | head -n1)"
          
          if ! command -v git &> /dev/null; then
            echo "❌ Error: Git not found"
            exit 1
          fi
          echo "✅ Git available"
          
          # Create and setup ccache directory
          mkdir -p ~/.ccache
          chmod 777 ~/.ccache
          echo "✅ ccache directory ready"

      - name: Install Build Dependencies
        run: |
          echo "=== Installing OpenWrt Build Dependencies ==="
          sudo apt-get update -y
          
          # Install essential build tools
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git \
            libncurses5-dev libssl-dev python3-setuptools \
            rsync swig unzip zlib1g-dev file wget \
            subversion python3 python3-pip python3-lib2to3 \
            ccache libelf-dev
          
          # Configure ccache
          ccache --version
          ccache -M 10G  # Set cache size to 10GB
          ccache -o compression=true
          ccache -o compression_level=1
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get clean -y
          echo "✅ Dependencies installed and ccache configured"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup OpenWrt Source
        run: |
          echo "=== Setting up OpenWrt Source ==="
          
          # Clone OpenWrt repository
          git clone --depth 1 -b ${{ github.event.inputs.openwrt_branch || env.OPENWRT_VERSION }} \
            https://git.openwrt.org/openwrt/openwrt.git openwrt-source
          
          cd openwrt-source
          
          # Update feeds
          echo "Updating feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # Copy configuration
          if [ -f "../${{ env.CONFIG_FILE }}" ]; then
            cp "../${{ env.CONFIG_FILE }}" .config
            echo "✅ Configuration file copied: ${{ env.CONFIG_FILE }}"
          else
            echo "❌ Error: Configuration file ${{ env.CONFIG_FILE }} not found"
            exit 1
          fi
          
          # Apply target-specific configuration
          echo "CONFIG_TARGET_${{ env.TARGET }}=y" >> .config
          echo "CONFIG_TARGET_PROFILE=\"${{ env.PROFILE }}\"" >> .config
          echo "CONFIG_TARGET_OPTIMIZATION=\"-O2 -pipe\"" >> .config
          echo "CONFIG_CCACHE=y" >> .config
          
          # WiFi drivers for Cudy WR3000 (MT7915)
          echo "CONFIG_PACKAGE_kmod-mt7915e=y" >> .config
          echo "CONFIG_PACKAGE_kmod-mt76x2=y" >> .config  # For 2.4GHz if needed
          
          # Advanced WiFi features
          echo "CONFIG_PACKAGE_kmod-mt7915-firmware=y" >> .config
          echo "CONFIG_PACKAGE_hostapd-common=y" >> .config
          
          # Essential packages
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_wireguard-tools=y" >> .config
          echo "CONFIG_PACKAGE_kmod-wireguard=y" >> .config
          
          # Generate default config
          make defconfig
          
          echo "✅ OpenWrt source setup complete"
          cd ..

      - name: Cache OpenWrt Build Artifacts
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            openwrt-source/dl
            openwrt-source/feeds
            openwrt-source/staging_dir
            openwrt-source/tmp
            ~/.ccache
          key: ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ env.TARGET }}-${{ env.PROFILE }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}-${{ hashFiles('openwrt-source/feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ env.TARGET }}-
            ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-
            ${{ runner.os }}-openwrt-

      - name: Log Cache Status
        run: |
          echo "=== Cache Status ==="
          if [ "${{ steps.cache.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Cache restored successfully"
            ccache -s
          else
            echo "ℹ️  Cache miss - will create new cache after build"
          fi
          
          # Log cache key for debugging
          echo "Cache key: ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ env.TARGET }}-${{ env.PROFILE }}-${{ hashFiles('${{ env.CONFIG_FILE }}') }}"

      - name: Configure ccache for Build
        run: |
          export CCACHE_DIR="$HOME/.ccache"
          export CCACHE_BASEDIR="$(pwd)/openwrt-source"
          export CCACHE_LOGFILE="$(pwd)/openwrt-source/ccache.log"
          export CC="ccache gcc"
          export CXX="ccache g++"
          export PATH="/usr/lib/ccache:$PATH"
          
          # Verify ccache setup
          which ccache
          ccache -s
          
          echo "✅ ccache configured for build"

      - name: Download Dependencies
        run: |
          echo "=== Downloading Dependencies ==="
          cd openwrt-source
          
          # First attempt with parallel download
          if make download -j$(nproc); then
            echo "✅ Download completed successfully"
          else
            echo "⚠️  Parallel download failed, retrying with single thread..."
            sleep 10
            if make download -j1 V=s; then
              echo "✅ Single-threaded download completed"
            else
              echo "❌ Download failed"
              exit 1
            fi
          fi
          
          cd ..

      - name: Build Firmware
        run: |
          echo "=== Building Firmware ==="
          cd openwrt-source
          
          # Start build with parallel jobs
          if make -j$(nproc) V=s; then
            echo "✅ Build completed successfully"
          else
            echo "⚠️  Parallel build failed, retrying with fewer jobs..."
            sleep 30
            if make -j$(nproc --ignore=1) V=s; then  # Use one less core
              echo "✅ Reduced parallel build completed"
            else
              echo "⚠️  Reduced parallel build failed, retrying single-threaded..."
              sleep 30
              if make -j1 V=s; then
                echo "✅ Single-threaded build completed"
              else
                echo "❌ Build failed completely"
                exit 1
              fi
            fi
          fi
          
          # Verify build output
          if [ -f "bin/targets/${{ env.TARGET }}/${{ env.PROFILE }}/openwrt-${{ env.TARGET }}-${{ env.PROFILE }}-squashfs-sysupgrade.bin" ]; then
            echo "✅ Firmware file found"
            ls -la bin/targets/${{ env.TARGET }}/${{ env.PROFILE }}/
          else
            echo "❌ Firmware file not found"
            exit 1
          fi
          
          cd ..

      - name: Prepare Artifacts
        run: |
          echo "=== Preparing Artifacts ==="
          mkdir -p firmware
          
          # Copy firmware files
          cp openwrt-source/bin/targets/${{ env.TARGET }}/${{ env.PROFILE }}/*.bin firmware/
          cp openwrt-source/bin/targets/${{ env.TARGET }}/${{ env.PROFILE }}/sha256sums firmware/
          cp openwrt-source/bin/targets/${{ env.TARGET }}/${{ env.PROFILE }}/config.buildinfo firmware/
          cp ${{ env.CONFIG_FILE }} firmware/
          
          # Copy full config for reference
          cp openwrt-source/.config firmware/full.config
          
          echo "Firmware files:"
          ls -la firmware/
          
          # Show ccache statistics
          ccache -s

      - name: Verify Cache Creation
        if: always()
        run: |
          echo "=== Final Cache Status ==="
          echo "ccache directory:"
          ls -la ~/.ccache/ || echo "ccache directory not accessible"
          
          echo "Cache statistics:"
          ccache -s || echo "ccache stats unavailable"
          
          echo "Build directories size:"
          du -sh openwrt-source/dl openwrt-source/feeds openwrt-source/staging_dir openwrt-source/tmp 2>/dev/null || echo "Some directories not found"
          
          echo "Disk usage:"
          df -h

      - name: Upload Firmware Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cudy-wr3000-firmware-${{ github.run_number }}
          path: firmware/*
          retention-days: 30

        if: always()
        run: |
          echo "=== Cleanup ==="
          # Clean up build directories to save space
          rm -rf openwrt-source/dl openwrt-source/tmp
          echo "✅ Cleanup completed"
